<?xml version="1.0" encoding="utf-8"?>
<executable>
  <category>Filtering.Arithmetic</category>
  <title>Compute weights of armature edges</title>
  <description><![CDATA[ Compute weights of armature edges using heat diffusion. For an armature of n edges, a weight vector of length n is computed for each voxel, where the ith vector component represents the weight of the ith armature edge at that voxel. The output is a file series named {weight_i.mha}, where weight_i.mha represents the weights for armature edge i. An import detail of the algorithm: As a preprocessing step, the bone voxels (voxels with value >=209) are partitioned by their proximity to the armature edges. Skeleton voxels that belong to the partition for an armature edge i will be assigned weight 1, and these voxels will be used as the source of the heat diffusion process. ]]>
  </description>
  <version>0.1.0.$Revision$(alpha)</version>
  <documentation-url></documentation-url>
  <license/>
  <contributor>Yuanxin Liu (Kitware)</contributor>
  <acknowledgements><![CDATA[Air Force Research Laboratories]]></acknowledgements>
  <parameters>
    <label>IO</label>
    <description><![CDATA[Input/output parameters]]></description>
    <image>
      <name>RestLabelmap</name>
      <label>Rest Labelmap</label>
      <channel>input</channel>
      <index>0</index>
      <description><![CDATA[Labelmap volume in resting pose]]></description>
    </image>

    <geometry fileExtensions="*.vtk">
      <name>ArmaturePoly</name>
      <label>Armature</label>
      <channel>input</channel>
      <index>1</index>
      <description><![CDATA[Resting armature]]></description>
    </geometry>

    <boolean>
      <name>InvertY</name>
      <description><![CDATA[Whether to invert the y coordinate of the input armature]]></description>
      <label>Invert Y Coordinates</label>
      <longflag>--inverty</longflag>
      <default>false</default>
    </boolean>

    <label>Controls</label>
    <description><![CDATA[Control how the module operates]]></description>
    <integer>
      <name>FirstEdge</name>
      <longflag>--first</longflag>
      <description><![CDATA[The first egde to process]]></description>
      <default>0</default>
    </integer>

    <integer>
      <name>LastEdge</name>
      <longflag>--last</longflag>
      <description><![CDATA[The last egde to process (default -1 tells the program to use the largest possible)]]></description>
      <default>-1</default>
    </integer>

    <directory>
      <name>WeightDirectory</name>
      <description><![CDATA[The directory to contain the weight files.]]></description>
      <longflag>--out</longflag>
      <default>./</default>
    </directory>

    <integer>
      <name>ExpansionDistance</name>
      <longflag>--expansion</longflag>
      <description><![CDATA[How far (in voxel units) to expand the diffusion region from the voronoi region.]]></description>
      <default>20</default>
    </integer>
    <integer>
      <name>SmoothingIteration</name>
      <longflag>--smooth</longflag>
      <description><![CDATA[Number of smoothing iterations. This is only necessary because we restrict the solving to a local region]]></description>
      <default>10</default>
    </integer>

    <boolean>
      <name>BinaryWeight</name>
      <label>Binary weight</label>
      <flag>-b</flag>
      <longflag>--binary</longflag>
      <description><![CDATA[Use binary weight. for Debugging only]]></description>
      <default>false</default>
    </boolean>

    <boolean>
      <name>DumpDebugImages</name>
      <longflag>--dump</longflag>
      <description><![CDATA[Dump debugging images. for Debugging only]]></description>
      <default>false</default>
    </boolean>
  </parameters>

</executable>
